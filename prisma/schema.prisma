generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(cuid())
  name                String?
  email               String      @unique
  emailVerified       DateTime?
  image               String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  accounts            Account[]
  candidatesCreated   Candidate[] @relation("CandidateCreator")
  candidatesEmailSent Candidate[] @relation("CandidateEmailSender")
  candidatesUpdated   Candidate[] @relation("CandidateUpdater")
  clientsCreated      Client[]    @relation("ClientCreator")
  clientsEmailSent    Client[]    @relation("ClientEmailSender")
  clientsUpdated      Client[]    @relation("ClientUpdater")
  sessions            Session[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("verification")
}

model EmailOTP {
  id        String   @id @default(cuid())
  email     String
  otp       String
  type      String
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, type])
  @@map("email_otps")
}

model Client {
  id                   String               @id @default(cuid())
  clientName           String
  clientLogo           String?
  representativeName   String
  representativeEmail  String
  representativeMobile String
  surveySchema         Json?
  createdBy            String
  createdAt            DateTime             @default(now())
  updatedBy            String?
  updatedAt            DateTime             @updatedAt
  surveyEmailSent      Boolean              @default(false)
  surveyEmailSentAt    DateTime?
  surveyEmailSentBy    String?
  surveyCompleted      Boolean              @default(false)
  surveyCompletedAt    DateTime?
  score                Float?
  surveyAnswers        ClientSurveyAnswer[]
  creator              User                 @relation("ClientCreator", fields: [createdBy], references: [id])
  emailSender          User?                @relation("ClientEmailSender", fields: [surveyEmailSentBy], references: [id])
  updater              User?                @relation("ClientUpdater", fields: [updatedBy], references: [id])

  @@map("clients")
}

model ClientSurveyAnswer {
  id           String   @id @default(cuid())
  clientId     String
  questionId   String
  answer       String
  answeredAt   DateTime @default(now())
  answer_score Float?
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("client_survey_answers")
}

model Candidate {
  id                String                  @id @default(cuid())
  candidateName     String
  candidateEmail    String                  @unique
  candidateMobile   String
  surveySchema      Json?
  createdBy         String
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  surveyEmailSent   Boolean                 @default(false)
  surveyEmailSentAt DateTime?
  surveyEmailSentBy String?
  surveyCompleted   Boolean                 @default(false)
  surveyCompletedAt DateTime?
  updatedBy         String?
  score             Float?
  surveyAnswers     CandidateSurveyAnswer[]
  creator           User                    @relation("CandidateCreator", fields: [createdBy], references: [id])
  emailSender       User?                   @relation("CandidateEmailSender", fields: [surveyEmailSentBy], references: [id])
  updater           User?                   @relation("CandidateUpdater", fields: [updatedBy], references: [id])

  @@map("candidates")
}

model CandidateSurveyAnswer {
  id           String    @id @default(cuid())
  candidateId  String
  questionId   String
  answer       String
  answeredAt   DateTime  @default(now())
  answer_score Float?
  candidate    Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@map("candidate_survey_answers")
}
